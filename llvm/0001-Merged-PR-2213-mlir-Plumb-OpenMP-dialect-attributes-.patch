From 522547ceaaa288d4c36c06b0cc7d76537ed21fb4 Mon Sep 17 00:00:00 2001
From: Lisa Ong <onglisa@microsoft.com>
Date: Mon, 1 Aug 2022 11:52:59 +0800
Subject: [PATCH] Merged PR 2213: [mlir] Plumb OpenMP dialect attributes 
 through affine and scf lowering

* Updated AffineToSCF and SCFToOpenMP to support OMP dialect attributes for num_threads, schedule_val, proc_bind, and collapse

Related work items: #3492
---
 .../mlir/Dialect/OpenMP/OpenMPDialect.h       | 17 +++++++
 mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td |  3 +-
 .../AffineToStandard/AffineToStandard.cpp     |  7 +++
 .../Conversion/SCFToOpenMP/SCFToOpenMP.cpp    | 48 ++++++++++++++-----
 mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp  | 10 ++++
 5 files changed, 73 insertions(+), 12 deletions(-)

diff --git a/mlir/include/mlir/Dialect/OpenMP/OpenMPDialect.h b/mlir/include/mlir/Dialect/OpenMP/OpenMPDialect.h
index 05d7637d52d7..39f38475508c 100644
--- a/mlir/include/mlir/Dialect/OpenMP/OpenMPDialect.h
+++ b/mlir/include/mlir/Dialect/OpenMP/OpenMPDialect.h
@@ -31,4 +31,21 @@
 #define GET_OP_CLASSES
 #include "mlir/Dialect/OpenMP/OpenMPOps.h.inc"
 
+namespace mlir {
+namespace omp {
+
+/// Attribute name for the IntegerAttr which encodes the value of num_threads.
+constexpr StringRef getNumThreadsAttrName() { return "omp.num_threads"; }
+
+/// Attribute name for the StringAttr which encodes the value of proc_bind.
+constexpr StringRef getProcBindAttrName() { return "omp.proc_bind"; }
+
+/// Attribute name for the StringAttr which encodes the value of schedule.
+constexpr StringRef getScheduleAttrName() { return "omp.schedule_val"; }
+
+/// Attribute name for the IntegerAttr which encodes the value of collapse.
+constexpr StringRef getCollapseAttrName() { return "omp.collapse_val"; }
+} // namespace omp
+} // namespace mlir
+
 #endif // MLIR_DIALECT_OPENMP_OPENMPDIALECT_H_
diff --git a/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td b/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td
index 7caf1cc99c98..970a304c28a7 100644
--- a/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td
+++ b/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td
@@ -96,7 +96,8 @@ def ParallelOp : OpenMP_Op<"parallel", [
   let regions = (region AnyRegion:$region);
 
   let builders = [
-    OpBuilder<(ins CArg<"ArrayRef<NamedAttribute>", "{}">:$attributes)>
+    OpBuilder<(ins CArg<"ArrayRef<NamedAttribute>", "{}">:$attributes)>,
+    OpBuilder<(ins "Value":$num_threads, "ClauseProcBindKindAttr":$proc_bind)>
   ];
   let assemblyFormat = [{
     oilist( `reduction` `(`
diff --git a/mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp b/mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp
index 2c9a1eaa2bf6..88173e12da8c 100644
--- a/mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp
+++ b/mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp
@@ -176,6 +176,11 @@ public:
     SmallVector<Value, 8> upperBoundTuple;
     SmallVector<Value, 8> lowerBoundTuple;
     SmallVector<Value, 8> identityVals;
+
+    auto transferDialectAttrs = [=](Operation *fromOp, Operation *toOp) {
+      toOp->setDialectAttrs(fromOp->getDialectAttrs());
+    };
+
     // Emit IR computing the lower and upper bound by expanding the map
     // expression.
     lowerBoundTuple.reserve(op.getNumDims());
@@ -208,6 +213,7 @@ public:
       rewriter.eraseBlock(parOp.getBody());
       rewriter.inlineRegionBefore(op.getRegion(), parOp.getRegion(),
                                   parOp.getRegion().end());
+      transferDialectAttrs(op, parOp);
       rewriter.replaceOp(op, parOp.getResults());
       return success();
     }
@@ -255,6 +261,7 @@ public:
           reduceOp.getReductionOperator().front().getArgument(1));
       rewriter.create<scf::ReduceReturnOp>(loc, reductionResult);
     }
+    transferDialectAttrs(op, parOp);
     rewriter.replaceOp(op, parOp.getResults());
     return success();
   }
diff --git a/mlir/lib/Conversion/SCFToOpenMP/SCFToOpenMP.cpp b/mlir/lib/Conversion/SCFToOpenMP/SCFToOpenMP.cpp
index e963f02de528..4dd84729f94c 100644
--- a/mlir/lib/Conversion/SCFToOpenMP/SCFToOpenMP.cpp
+++ b/mlir/lib/Conversion/SCFToOpenMP/SCFToOpenMP.cpp
@@ -377,7 +377,19 @@ struct ParallelOpLowering : public OpRewritePattern<scf::ParallelOp> {
     }
 
     // Create the parallel wrapper.
-    auto ompParallel = rewriter.create<omp::ParallelOp>(loc);
+    omp::ParallelOp ompParallel;
+    if (auto numThreads = parallelOp->getAttrOfType<IntegerAttr>(omp::getNumThreadsAttrName())) {
+      Value numThreadsVal = rewriter.create<arith::ConstantIntOp>(loc, numThreads.getInt(), numThreads.getType());
+      auto procBindStr = parallelOp->getAttrOfType<StringAttr>(omp::getProcBindAttrName());
+      if (auto procBind = omp::symbolizeClauseProcBindKind(procBindStr)) {
+        auto procBindAttr = omp::ClauseProcBindKindAttr::get(rewriter.getContext(), *procBind);
+        ompParallel = rewriter.create<omp::ParallelOp>(loc, numThreadsVal, procBindAttr);
+      } else {
+        return failure();
+      }
+    } else {
+      ompParallel = rewriter.create<omp::ParallelOp>(loc);
+    }
     {
 
       OpBuilder::InsertionGuard guard(rewriter);
@@ -386,9 +398,20 @@ struct ParallelOpLowering : public OpRewritePattern<scf::ParallelOp> {
       // Replace the loop.
       {
         OpBuilder::InsertionGuard allocaGuard(rewriter);
+        NamedAttrList attrs;
+        if (auto scheduleKindStr = parallelOp->getAttrOfType<StringAttr>(omp::getScheduleAttrName())) {
+          if (auto scheduleKind = omp::symbolizeClauseScheduleKind(scheduleKindStr)) {
+            auto scheduleKindAttr = omp::ClauseScheduleKindAttr::get(rewriter.getContext(), *scheduleKind);
+            attrs.append("schedule_val", scheduleKindAttr);
+          }
+        }
+        if (auto collapseVal = parallelOp->getAttrOfType<IntegerAttr>(omp::getCollapseAttrName())) {
+          attrs.append("collapse_val", collapseVal);
+        }
         auto loop = rewriter.create<omp::WsLoopOp>(
             parallelOp.getLoc(), parallelOp.getLowerBound(),
-            parallelOp.getUpperBound(), parallelOp.getStep());
+            parallelOp.getUpperBound(), parallelOp.getStep(),
+            attrs.getAttrs());
         rewriter.create<omp::TerminatorOp>(loc);
 
         rewriter.inlineRegionBefore(parallelOp.getRegion(), loop.region(),
@@ -417,14 +440,17 @@ struct ParallelOpLowering : public OpRewritePattern<scf::ParallelOp> {
     }
 
     // Load loop results.
-    SmallVector<Value> results;
-    results.reserve(reductionVariables.size());
-    for (Value variable : reductionVariables) {
-      Value res = rewriter.create<LLVM::LoadOp>(loc, variable);
-      results.push_back(res);
+    if (!reductionVariables.empty()) {
+      SmallVector<Value> results;
+      results.reserve(reductionVariables.size());
+      for (Value variable : reductionVariables) {
+        Value res = rewriter.create<LLVM::LoadOp>(loc, variable);
+        results.push_back(res);
+      }
+      rewriter.replaceOp(parallelOp, results);
+    } else {
+      rewriter.eraseOp(parallelOp);
     }
-    rewriter.replaceOp(parallelOp, results);
-
     return success();
   }
 };
@@ -433,8 +459,8 @@ struct ParallelOpLowering : public OpRewritePattern<scf::ParallelOp> {
 static LogicalResult applyPatterns(ModuleOp module) {
   ConversionTarget target(*module.getContext());
   target.addIllegalOp<scf::ReduceOp, scf::ReduceReturnOp, scf::ParallelOp>();
-  target.addLegalDialect<omp::OpenMPDialect, LLVM::LLVMDialect,
-                         memref::MemRefDialect>();
+  target.addLegalDialect<omp::OpenMPDialect, arith::ArithmeticDialect,
+                         LLVM::LLVMDialect, memref::MemRefDialect>();
 
   RewritePatternSet patterns(module.getContext());
   patterns.add<ParallelOpLowering>(module.getContext());
diff --git a/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp b/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp
index 96ff6b1c1414..18d8591baa14 100644
--- a/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp
+++ b/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp
@@ -476,6 +476,16 @@ void ParallelOp::build(OpBuilder &builder, OperationState &state,
   state.addAttributes(attributes);
 }
 
+void ParallelOp::build(OpBuilder &builder, OperationState &state,
+                       Value numThreads, ClauseProcBindKindAttr procBind) {
+  ParallelOp::build(
+      builder, state, /*if_expr_var=*/nullptr, numThreads,
+      /*allocate_vars=*/ValueRange(), /*allocators_vars=*/ValueRange(),
+      /*reduction_vars=*/ValueRange(), /*reductions=*/nullptr,
+      procBind);
+}
+
 LogicalResult ParallelOp::verify() {
   if (allocate_vars().size() != allocators_vars().size())
     return emitError(
-- 
2.32.1 (Apple Git-133)

