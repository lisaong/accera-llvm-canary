commit a50c92f66ae67f62e50f5a3ad9ef8f338de9ee42
Author: Lisa Ong
Date:   Fri Feb 25 05:55:04 2022 -0800

    Fix for https://reviews.llvm.org/D117514

commit 6aebd93619411eac59d7927564fd0d5130f35bbf
Author: Lisa Ong
Date:   Mon Feb 14 18:30:05 2022 +0800

    Merged PR 2213: [mlir] Plumb OpenMP dialect attributes through affine and scf lowering

    Updated AffineToSCF and SCFToOpenMP to support OMP dialect attributes for num_threads, schedule_val, proc_bind, and collapse

    Related work items: #3492
---
 .../mlir/Dialect/OpenMP/OpenMPDialect.h       | 17 +++++++++++++
 mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td |  3 ++-
 .../AffineToStandard/AffineToStandard.cpp     |  7 ++++++
 .../Conversion/SCFToOpenMP/SCFToOpenMP.cpp    | 24 +++++++++++++++++--
 mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp  | 10 ++++++++
 5 files changed, 58 insertions(+), 3 deletions(-)

diff --git a/mlir/include/mlir/Dialect/OpenMP/OpenMPDialect.h b/mlir/include/mlir/Dialect/OpenMP/OpenMPDialect.h
index 05d7637d52d7..8295b01f8fcd 100644
--- a/mlir/include/mlir/Dialect/OpenMP/OpenMPDialect.h
+++ b/mlir/include/mlir/Dialect/OpenMP/OpenMPDialect.h
@@ -31,4 +31,21 @@
 #define GET_OP_CLASSES
 #include "mlir/Dialect/OpenMP/OpenMPOps.h.inc"
 
+namespace mlir {
+namespace omp {
+
+/// Attribute name for the IntegerAttr which encodes the value of num_threads.
+constexpr StringRef getNumThreadsAttrName() { return "omp.num_threads"; }
+
+/// Attribute name for the StringAttr which encodes the value of proc_bind.
+constexpr StringRef getProcBindAttrName() { return "omp.proc_bind"; }
+
+/// Attribute name for the StringAttr which encodes the value of schedule.
+constexpr StringRef getScheduleAttrName() { return "omp.schedule_val"; }
+
+/// Attribute name for the IntegerAttr which encodes the value of collapse.
+constexpr StringRef getCollapseAttrName() { return "omp.collapse_val"; }
+}
+}
+
 #endif // MLIR_DIALECT_OPENMP_OPENMPDIALECT_H_
diff --git a/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td b/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td
index 505e9cb22a0a..d124be11cb94 100644
--- a/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td
+++ b/mlir/include/mlir/Dialect/OpenMP/OpenMPOps.td
@@ -124,7 +124,8 @@ def ParallelOp : OpenMP_Op<"parallel", [AttrSizedOperandSegments,
   let regions = (region AnyRegion:$region);
 
   let builders = [
-    OpBuilder<(ins CArg<"ArrayRef<NamedAttribute>", "{}">:$attributes)>
+    OpBuilder<(ins CArg<"ArrayRef<NamedAttribute>", "{}">:$attributes)>,
+    OpBuilder<(ins "Value":$num_threads, "ClauseProcBindKindAttr":$proc_bind)>
   ];
   let parser = [{ return parseParallelOp(parser, result); }];
   let printer = [{ return printParallelOp(p, *this); }];
diff --git a/mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp b/mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp
index 8ff1134f4b7b..888a6ed20fdc 100644
--- a/mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp
+++ b/mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp
@@ -385,6 +385,11 @@ public:
     SmallVector<Value, 8> upperBoundTuple;
     SmallVector<Value, 8> lowerBoundTuple;
     SmallVector<Value, 8> identityVals;
+
+    auto transferDialectAttrs = [=](Operation *fromOp, Operation *toOp) {
+      toOp->setDialectAttrs(fromOp->getDialectAttrs());
+    };
+
     // Emit IR computing the lower and upper bound by expanding the map
     // expression.
     lowerBoundTuple.reserve(op.getNumDims());
@@ -418,6 +423,7 @@ public:
       rewriter.eraseBlock(parOp.getBody());
       rewriter.inlineRegionBefore(op.region(), parOp.getRegion(),
                                   parOp.getRegion().end());
+      transferDialectAttrs(op, parOp);
       rewriter.replaceOp(op, parOp.getResults());
       return success();
     }
@@ -467,6 +473,7 @@ public:
           reduceOp.getReductionOperator().front().getArgument(1));
       rewriter.create<scf::ReduceReturnOp>(loc, reductionResult);
     }
+    transferDialectAttrs(op, parOp);
     rewriter.replaceOp(op, parOp.getResults());
     return success();
   }
diff --git a/mlir/lib/Conversion/SCFToOpenMP/SCFToOpenMP.cpp b/mlir/lib/Conversion/SCFToOpenMP/SCFToOpenMP.cpp
index e472af257776..f289b07f3cd6 100644
--- a/mlir/lib/Conversion/SCFToOpenMP/SCFToOpenMP.cpp
+++ b/mlir/lib/Conversion/SCFToOpenMP/SCFToOpenMP.cpp
@@ -389,7 +389,19 @@ struct ParallelOpLowering : public OpRewritePattern<scf::ParallelOp> {
     }
 
     // Create the parallel wrapper.
-    auto ompParallel = rewriter.create<omp::ParallelOp>(loc);
+    omp::ParallelOp ompParallel;
+    if (auto numThreads = parallelOp->getAttrOfType<IntegerAttr>(omp::getNumThreadsAttrName())) {
+      Value numThreadsVal = rewriter.create<arith::ConstantIntOp>(loc, numThreads.getInt(), numThreads.getType());
+      auto procBindStr = parallelOp->getAttrOfType<StringAttr>(omp::getProcBindAttrName());
+      if (auto procBind = omp::symbolizeClauseProcBindKind(procBindStr)) {
+        auto procBindAttr = omp::ClauseProcBindKindAttr::get(rewriter.getContext(), *procBind);
+        ompParallel = rewriter.create<omp::ParallelOp>(loc, numThreadsVal, procBindAttr);
+      } else {
+        return failure();
+      }
+    } else {
+      ompParallel = rewriter.create<omp::ParallelOp>(loc);
+    }
     {
       OpBuilder::InsertionGuard guard(rewriter);
       rewriter.createBlock(&ompParallel.region());
@@ -405,9 +417,17 @@ struct ParallelOpLowering : public OpRewritePattern<scf::ParallelOp> {
       }
 
       // Replace the loop.
+      NamedAttrList attrs;
+      if (auto scheduleVal = parallelOp->getAttrOfType<StringAttr>(omp::getScheduleAttrName())) {
+        attrs.append("schedule_val", scheduleVal);
+      }
+      if (auto collapseVal = parallelOp->getAttrOfType<IntegerAttr>(omp::getCollapseAttrName())) {
+        attrs.append("collapse_val", collapseVal);
+      }
       auto loop = rewriter.create<omp::WsLoopOp>(
           parallelOp.getLoc(), parallelOp.getLowerBound(),
-          parallelOp.getUpperBound(), parallelOp.getStep());
+          parallelOp.getUpperBound(), parallelOp.getStep(),
+          attrs.getAttrs());
       rewriter.create<omp::TerminatorOp>(loc);
 
       rewriter.inlineRegionBefore(parallelOp.getRegion(), loop.region(),
diff --git a/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp b/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp
index 46a2bf3019e0..d9104bf41a93 100644
--- a/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp
+++ b/mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp
@@ -73,6 +73,16 @@ void ParallelOp::build(OpBuilder &builder, OperationState &state,
   state.addAttributes(attributes);
 }
 
+void ParallelOp::build(OpBuilder &builder, OperationState &state,
+                       Value numThreads, ClauseProcBindKindAttr procBind) {
+  ParallelOp::build(
+      builder, state, /*if_expr_var=*/nullptr, numThreads,
+      /*default_val=*/nullptr, /*private_vars=*/ValueRange(),
+      /*firstprivate_vars=*/ValueRange(), /*shared_vars=*/ValueRange(),
+      /*copyin_vars=*/ValueRange(), /*allocate_vars=*/ValueRange(),
+      /*allocators_vars=*/ValueRange(), procBind);
+}
+
 //===----------------------------------------------------------------------===//
 // Parser and printer for Operand and type list
 //===----------------------------------------------------------------------===//
-- 
2.25.1

